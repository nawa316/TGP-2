# Support Vector Machine (SVM)
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay, RocCurveDisplay
import matplotlib.pyplot as plt

print("\n=== Training SVM Model ===")
svm_model = SVC(kernel='rbf', probability=True, random_state=42)
svm_model.fit(X_train_scaled, y_train)

print("\nEvaluasi pada Data Training...")
y_train_pred = svm_model.predict(X_train_scaled)
y_train_proba = svm_model.predict_proba(X_train_scaled)[:, 1]

print("\nKinerja pada Data Training:")
print("Accuracy:", accuracy_score(y_train, y_train_pred))
print("Precision:", precision_score(y_train, y_train_pred))
print("Recall:", recall_score(y_train, y_train_pred))
print("F1-Score:", f1_score(y_train, y_train_pred))
print("AUC-ROC:", roc_auc_score(y_train, y_train_proba))

print("\nEvaluasi pada Data Test...")
y_test_pred = svm_model.predict(X_test_scaled)
y_test_proba = svm_model.predict_proba(X_test_scaled)[:, 1]

print("\nKinerja pada Data Test:")
print("Accuracy:", accuracy_score(y_test, y_test_pred))
print("Precision:", precision_score(y_test, y_test_pred))
print("Recall:", recall_score(y_test, y_test_pred))
print("F1-Score:", f1_score(y_test, y_test_pred))
print("AUC-ROC:", roc_auc_score(y_test, y_test_proba))

# Confusion Matrix
y_cm = confusion_matrix(y_test, y_test_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=y_cm)
disp.plot(cmap='Blues')
plt.title('Confusion Matrix pada Data Test (SVM)')
plt.show()

# ROC Curve
RocCurveDisplay.from_estimator(svm_model, X_test_scaled, y_test)
plt.title('ROC Curve pada Data Test (SVM)')
plt.show()
